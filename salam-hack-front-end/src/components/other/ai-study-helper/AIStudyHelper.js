import React, { useState, useEffect } from "react";
import "./aIStudyHelper.css";
import { getGptResponse } from "../../../pages/lessonQuiz/lessonQuizLogic";
// ุงุณุชูุฑุงุฏ ููุชุจุงุช KaTeX
import "katex/dist/katex.min.css";
import ReactMarkdown from "react-markdown";
import rehypeKatex from "rehype-katex";
import remarkMath from "remark-math";

export default function AIStudyHelper({ lessonTitle, courseTitle }) {
  const [loading, setLoading] = useState(false);
  const [explanation, setExplanation] = useState("");
  const [error, setError] = useState(null);
  const [showAIDisclaimer, setShowAIDisclaimer] = useState(true);

  // ุฏุงูุฉ ูุชูููุฏ ุงูprompt ุงููุญุณู
  const generatePrompt = (lessonTitle, courseTitle) => {
    return `ูู ุจุชูุฏูู ุดุฑุญ ุชุนูููู ุดุงูู ููุชููุฒ ูููุถูุน "${lessonTitle}" ูู ููุฑุฑ "${
      courseTitle || "ุบูุฑ ูุญุฏุฏ"
    }" ุจุฃุณููุจ ุฑุณูู ููููุฌู ูุน ุงูุชุฑููุฒ ุนูู ุงูุฌูุงูุจ ุงูุชุทุจูููุฉ:
  
  ### ุงููููู ุงูุนุงู
  1. **ููุฏูุฉ ููุถูุนูุฉ**: ุชูุฏูู ุชุนุฑูู ุฏููู ููููุถูุน ูุจูุงู ุฃูููุชู ูุชุทุจููุงุชู ุงูุนูููุฉ
  2. **ุงูููุงููู ุงูุฃุณุงุณูุฉ**: ุนุฑุถ ุงูููุงููู ุงูุฑุฆูุณูุฉ ุจูุบุฉ ุฑุณููุฉ ูุงุถุญุฉ ูุน ุฑุจุทูุง ุจุงูุชุทุจููุงุช ุงูุนูููุฉ
  3. **ุชุทุจููุงุช ุนูููุฉ**: ุชูุฏูู 2-3 ุฃูุซูุฉ ุนูููุฉ ุชูุตูููุฉ ููู ููููู ูุน ุดุฑุญ ุงูุฎุทูุงุช ุงูุชุทุจูููุฉ
  4. **ุงูุญุงูุงุช ุงูุนูููุฉ**: ุนุฑุถ ุญุงูุงุช ูุงูุนูุฉ ุชูุถุญ ููููุฉ ุชุทุจูู ูุฐู ุงูููุงููู ูู ุณูุงูุงุช ูุฎุชููุฉ
  5. **ุงูููุงุฑุณุงุช ุงููุซูู**: ุชูุฏูู ุฅุฑุดุงุฏุงุช ุนูููุฉ ูุฃูุถู ุงูููุงุฑุณุงุช ุงููุชุจุนุฉ ูู ูุฐุง ุงููุฌุงู
  6. **ุงูุฎูุงุตุฉ**: ุชูุฎูุต ููุธู ููููุงุท ุงูุฑุฆูุณูุฉ ูุงูุชุทุจููุงุช ุงูุนูููุฉ ุงูุฃุณุงุณูุฉ
  
  ### ุงูุชูุณูู ูุงูุฃุณููุจ
  - ุงุณุชุฎุฏู ุนูุงููู ุฑุฆูุณูุฉ (##) ููุฑุนูุฉ (###) ุจุชุณูุณู ููุทูู
  - ูุณู ุงููุญุชูู ุฅูู ููุฑุงุช ูุญุฏุฏุฉ ูููุถูุนูุฉ
  - ุงุณุชุฎุฏู ุชุนุฏุงุฏุงุช ููุทูุฉ (โข) ูุชูุธูู ุงูููุงุฆู ูุงูุฎุทูุงุช ุงูุนูููุฉ
  - ุฃุฏุฑุฌ ุฌุฏุงูู ูุนุฑุถ ุงูุจูุงูุงุช ุงูููุงุฑูุฉ ุฃู ุงููุนูููุงุช ุงูุชุทุจูููุฉ (ุจุงุณุชุฎุฏุงู ุตูุบุฉ Markdown)
  - ุงูุชุฒู ุจุฃุณููุจ ุฑุณูู ููููุฌู ููุง ูู ุงูููุงูุงุช ุงููุชุฎุตุตุฉ
  
  ### ุงูุฃูุซูุฉ ูุงูุชูุถูุญุงุช
  - ูุฏู ุฃูุซูุฉ ุนูููุฉ ูุงูุนูุฉ ูุน ุดุฑุญ ุชูุตููู ููู ุฎุทูุฉ
  - ุงุดุฑุญ ุงูุฅุฌุฑุงุกุงุช ุงูุนูููุฉ ุจูุถูุญ ูุน ุชูุถูุญ ุงูุฃุณุจุงุจ ูุงููุชุงุฆุฌ
  - ุฃุฏุฑุฌ ุฑุณูู ุชูุถูุญูุฉ ุฃู ุชูุซููุงุช ุจูุงููุฉ ุฅู ุฃููู (ุจุงุณุชุฎุฏุงู ุงููุตู ุงููุตู)
  - ุงุฑุจุท ุจูู ุงููุธุฑูุฉ ูุงูุชุทุจูู ุจุดูู ูููุฌู ูููุธู
  
  ### ุงููุนุงุฏูุงุช ูุงูุตูุบ (ุฅู ูุฌุฏุช)
  - ุงุณุชุฎุฏู ุตูุบุฉ KaTeX ูููุนุงุฏูุงุช ูุงูุฑููุฒ:
    * ูููุนุงุฏูุงุช ุฏุงุฎู ุงููุต: $x^2 + y^2 = z^2$
    * ูููุนุงุฏูุงุช ุงููุณุชููุฉ: $$E = mc^2$$
  - ูุฏู ุดุฑุญุงู ุชุทุจูููุงู ููู ูุนุงุฏูุฉ ุชูุถุญ ุงุณุชุฎุฏุงููุง ุงูุนููู
  - ูุถุญ ุงููุชุบูุฑุงุช ูุงูุซูุงุจุช ุจุฏูุฉ ูุน ุฅุนุทุงุก ุฃูุซูุฉ ุฑูููุฉ
  
  ### ุงูุฎุงุชูุฉ
  - ูุฏู ููุฎุตุงู ุดุงููุงู ููููุงุท ุงูุฑุฆูุณูุฉ ูุงูุชุทุจููุงุช
  - ุงูุชุฑุญ ูุฌุงูุงุช ุชุทุจูููุฉ ุฅุถุงููุฉ ููููุงููู ุงููุดุฑูุญุฉ
  - ุฃุถู 3-5 ุฃุณุฆูุฉ ุชุทุจูููุฉ ูุน ุฅุฌุงุจุงุชูุง ุงููููุฐุฌูุฉ ูุชูููู ุงูููู
  
  ูุฏู ุงููุญุชูู ุจุตูุบุฉ Markdown ุงููุงููุฉุ ูุน ุงุณุชุฎุฏุงู ุชูุณููุงุช ูุซู **ูุต ุบุงูู** ู *ูุต ูุงุฆู* ูุงูุนูุงููู ุงูููุงุณุจุฉ ูุฅุถูุงุก ุงูุทุงุจุน ุงูุฑุณูู ูุชุญุณูู ุชูุธูู ุงููุญุชูู ูุณูููุฉ ูุชุงุจุนุชู.`;
  };

  // ุฏุงูุฉ ููุนุงูุฌุฉ ุฃุฎุทุงุก KaTeX
  const processKatexInMarkdown = (text) => {
    let processed = text;

    // ุฅุตูุงุญ ุจุนุถ ูุดุงูู KaTeX ุงูุดุงุฆุนุฉ
    processed = processed.replace(/\\([\(\)\[\]])/g, "\\$1");

    return processed;
  };

  // ุฏุงูุฉ ูุทูุจ ุงูุดุฑุญ ูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
  const fetchExplanation = async () => {
    if (!lessonTitle) return;

    try {
      setLoading(true);
      setError(null);
      const prompt = generatePrompt(lessonTitle, courseTitle);
      const response = await getGptResponse(prompt, setLoading);
      setExplanation(processKatexInMarkdown(response));
    } catch (err) {
      setError("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุดุฑุญ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.");
      console.error("Error fetching AI explanation:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleReload = () => {
    fetchExplanation();
  };

  // ุฏุงูุฉ ูุฅุฎูุงุก ุฅุดุนุงุฑ ุงูุฐูุงุก ุงูุงุตุทูุงุนู
  const hideAIDisclaimer = () => {
    setShowAIDisclaimer(false);
  };

  // ุงุณุชุฏุนุงุก ุงูุฏุงูุฉ ุนูุฏ ุชุบููุฑ ุนููุงู ุงูุฏุฑุณ
  useEffect(() => {
    if (lessonTitle) {
      fetchExplanation();
    } else {
      setExplanation("");
    }
  }, [lessonTitle]);

  return (
    <div className="ai-study-helper">
      {showAIDisclaimer && (
        <div className="ai-disclaimer">
          <div className="ai-disclaimer-content">
            <div className="ai-icon">๐ค</div>
            <div className="ai-message">
              <p>
                ูุฐุง ุงูุดุฑุญ ุชู ุชูููุฏู ุจูุงุณุทุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุฏ ูุญุชุงุฌ ุฅูู
                ูุฑุงุฌุนุฉ. ูุฑุฌู ุงูุชุญูู ูู ุงููุนูููุงุช ุงูููุฏูุฉ.
              </p>
            </div>
            <button className="ai-disclaimer-close" onClick={hideAIDisclaimer}>
              ร
            </button>
          </div>
        </div>
      )}

      <div className="ai-study-header">
        <h2>ุดุฑุญ ุฏุฑุณ: {lessonTitle}</h2>
        {!loading && explanation && (
          <button
            className="reload-button"
            onClick={handleReload}
            title="ุฅุนุงุฏุฉ ุชูููุฏ ุงูุดุฑุญ"
          >
            โณ
          </button>
        )}
      </div>

      {loading ? (
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>ุฌุงุฑู ุชุญุถูุฑ ุงูุดุฑุญ ุงูููุตู...</p>
        </div>
      ) : error ? (
        <div className="error-container">
          <p>{error}</p>
          <button className="retry-button" onClick={handleReload}>
            ุฅุนุงุฏุฉ ุงููุญุงููุฉ
          </button>
        </div>
      ) : (
        <div className="explanation-content">
          {explanation ? (
            <ReactMarkdown
              remarkPlugins={[remarkMath]}
              rehypePlugins={[rehypeKatex]}
              components={{
                h1: ({ node, ...props }) => (
                  <h2 className="ai-heading-1" {...props} />
                ),
                h2: ({ node, ...props }) => (
                  <h3 className="ai-heading-2" {...props} />
                ),
                h3: ({ node, ...props }) => (
                  <h4 className="ai-heading-3" {...props} />
                ),
                code: ({ node, inline, className, children, ...props }) => {
                  return inline ? (
                    <code className="inline-code" {...props}>
                      {children}
                    </code>
                  ) : (
                    <div className="code-container">
                      <pre className="code-block">
                        <code className={className} {...props}>
                          {children}
                        </code>
                      </pre>
                    </div>
                  );
                },
                table: ({ node, ...props }) => (
                  <table className="ai-table" {...props} />
                ),
                ul: ({ node, ...props }) => (
                  <ul className="ai-list" {...props} />
                ),
                ol: ({ node, ...props }) => (
                  <ol className="ai-ordered-list" {...props} />
                ),
                blockquote: ({ node, ...props }) => (
                  <blockquote className="ai-blockquote" {...props} />
                ),
              }}
            >
              {explanation}
            </ReactMarkdown>
          ) : (
            <div className="no-content">
              <p>ูู ูุชู ุงูุนุซูุฑ ุนูู ุดุฑุญ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.</p>
              <button className="primary-button" onClick={handleReload}>
                ุชูููุฏ ุงูุดุฑุญ
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
